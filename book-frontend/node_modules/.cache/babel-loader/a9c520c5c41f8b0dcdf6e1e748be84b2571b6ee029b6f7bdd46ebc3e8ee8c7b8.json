{"ast":null,"code":"var _jsxFileName = \"D:\\\\workspace\\\\react work\\\\book-frontend\\\\src\\\\components\\\\pages\\\\book\\\\Detail.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Detail = props => {\n  _s();\n  let navigate = useNavigate();\n  const id = useParams().id;\n  const [book, setBook] = useState({\n    id: '',\n    title: '',\n    author: ''\n  });\n  useEffect(() => {\n    fetch('http://localhost:8080/book/' + id, {\n      method: 'GET'\n    }) // 요청시 backend에서 crossorigin 세팅을 해서 외부에서도 api 사용하게 해야됨 여기선 해당 java Controller method에 @Crossorigin 어노테이션 추가함\n    .then(res => res.json()).then(res => {\n      console.log(1, res);\n      setBook(res);\n    }).catch(err => alert(err));\n  }, []);\n  const deleteBook = id => {\n    fetch('http://localhost:8080/book/' + id, {\n      method: 'DELETE'\n    }) // 요청시 backend에서 crossorigin 세팅을 해서 외부에서도 api 사용하게 해야됨 여기선 해당 java Controller method에 @Crossorigin 어노테이션 추가함\n    .then(res => res.text()).then(res => {\n      if (res === 'ok') {\n        navigate('/');\n      } else {\n        alert('삭제실패');\n      }\n    }).catch(err => alert(err));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uCC45 \\uC0C1\\uC138\\uBCF4\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"warning\",\n      children: \"\\uC218\\uC815\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), ' ', /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"danger\",\n      onClick: () => deleteBook(book.id),\n      children: \"\\uC0AD\\uC81C\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: book.author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: book.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Detail, \"xLp04voVwEWcFfDqzrL/IpUqgIg=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = Detail;\nexport default Detail;\nvar _c;\n$RefreshReg$(_c, \"Detail\");","map":{"version":3,"names":["React","useEffect","useState","Button","useNavigate","useParams","jsxDEV","_jsxDEV","Detail","props","_s","navigate","id","book","setBook","title","author","fetch","method","then","res","json","console","log","catch","err","alert","deleteBook","text","children","fileName","_jsxFileName","lineNumber","columnNumber","variant","onClick","_c","$RefreshReg$"],"sources":["D:/workspace/react work/book-frontend/src/components/pages/book/Detail.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { useNavigate, useParams } from 'react-router-dom';\r\n\r\nconst Detail = (props) => {\r\n  let navigate = useNavigate();\r\n  const id = useParams().id;\r\n  const [book, setBook] = useState({\r\n    id: '',\r\n    title: '',\r\n    author: '',\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetch('http://localhost:8080/book/' + id, { method: 'GET' }) // 요청시 backend에서 crossorigin 세팅을 해서 외부에서도 api 사용하게 해야됨 여기선 해당 java Controller method에 @Crossorigin 어노테이션 추가함\r\n      .then((res) => res.json())\r\n      .then((res) => {\r\n        console.log(1, res);\r\n        setBook(res);\r\n      })\r\n      .catch((err) => alert(err));\r\n  }, []);\r\n\r\n  const deleteBook = (id) => {\r\n    fetch('http://localhost:8080/book/' + id, { method: 'DELETE' }) // 요청시 backend에서 crossorigin 세팅을 해서 외부에서도 api 사용하게 해야됨 여기선 해당 java Controller method에 @Crossorigin 어노테이션 추가함\r\n      .then((res) => res.text())\r\n      .then((res) => {\r\n        if (res === 'ok') {\r\n          navigate('/');\r\n        } else {\r\n          alert('삭제실패');\r\n        }\r\n      })\r\n      .catch((err) => alert(err));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>책 상세보기</h1>\r\n      <Button variant=\"warning\">수정</Button>{' '}\r\n      <Button variant=\"danger\" onClick={() => deleteBook(book.id)}>\r\n        삭제\r\n      </Button>\r\n      <hr />\r\n      <h3>{book.author}</h3>\r\n      <h1>{book.title}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Detail;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}